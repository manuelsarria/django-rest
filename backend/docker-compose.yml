version: '3.8'
services:
  db:
    env_file:
      - .env
    image: postgres:14.1-alpine
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:5432"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DJANGO_SETTINGS_MODULE=src.settings.base
    ports:
      - '5432:5432'
    volumes: 
      - db:/var/lib/postgresql/data
  api:
    env_file:
      - .env
    platform: linux/amd64
    container_name: back-api
    build:
      context: ./
      dockerfile: ./docker/development/django/Dockerfile
      args:
        - SECRET_KEY=${SECRET_KEY}
    image: back-api
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    depends_on:
      - db
      - redis
    ports:
      - 8000:8000
    links:
      - db
    volumes:
      - './:/src'
  celery:
    restart: always
    build:
      context: ./
      dockerfile: ./docker/development/celery/Dockerfile
    command: bash -c "src/run_celery.sh"
    # healthcheck:
    #   test: celery --app=src inspect ping
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    env_file:
      - .env
    volumes:
      - .:/src/src
    depends_on:
      - api
      - redis
  redis:
    image: "redis:alpine"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:6379"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    ports:
     - 6379:6379
  flower:
    image: mher/flower
    command: sh -c "celery -A celery flower  && flower -A apps.profiles.tasks"
    ports:
      - 5555:5555
    env_file:
      - .env
    depends_on:
      - celery
      - redis
volumes:
  db:
    driver: local